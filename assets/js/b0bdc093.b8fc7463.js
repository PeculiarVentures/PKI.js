"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[7994],{839:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>c,contentTitle:()=>m,default:()=>d,frontMatter:()=>p,metadata:()=>t,toc:()=>l});const t=JSON.parse('{"id":"examples/timestamping/creating-a-timestamp-response","title":"Creating a Timestamp response","description":"In this example, you will see how to create, parse and verify timestamp responses.","source":"@site/docs/examples/timestamping/creating-a-timestamp-response.mdx","sourceDirName":"examples/timestamping","slug":"/examples/timestamping/creating-a-timestamp-response","permalink":"/docs/examples/timestamping/creating-a-timestamp-response","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{},"sidebar":"examples","previous":{"title":"Creating a Timestamp request","permalink":"/docs/examples/timestamping/creating-a-timestamp-request"}}');var a=s(74848),i=s(28453),r=s(58069);const o='import * as pkijs from \'pkijs\';\nimport * as asn1js from \'asn1js\';\n\n// Generate random serial number\nconst serialNumber = pkijs.getRandomValues(new Uint8Array(10)).buffer;\n\n// Create specific TST info structure to sign\nconst tstInfo = new pkijs.TSTInfo({\n  version: 1,\n  policy: tspReq.reqPolicy,\n  messageImprint: tspReq.messageImprint,\n  serialNumber: new asn1js.Integer({ valueHex: serialNumber }),\n  genTime: new Date(),\n  ordering: true,\n  accuracy: new pkijs.Accuracy({\n    seconds: 1,\n    millis: 1,\n    micros: 10\n  }),\n  nonce: tspReq.nonce,\n});\n\n// Create and sign CMS Signed Data with TSTInfo\nconst cmsSigned = new pkijs.SignedData({\n  version: 3,\n  encapContentInfo: new pkijs.EncapsulatedContentInfo({\n    eContentType: "1.2.840.113549.1.9.16.1.4", // "tSTInfo" content type\n    eContent: new asn1js.OctetString({ valueHex: tstInfo.toSchema().toBER() }),\n  }),\n  signerInfos: [\n    new pkijs.SignerInfo({\n      version: 1,\n      sid: new pkijs.IssuerAndSerialNumber({\n        issuer: cert.issuer,\n        serialNumber: cert.serialNumber\n      })\n    })\n  ],\n  certificates: [cert]\n});\n\nawait cmsSigned.sign(keys.privateKey, 0, "SHA-256");\n\n// Create CMS Content Info\nconst cmsContent = new pkijs.ContentInfo({\n  contentType: pkijs.ContentInfo.SIGNED_DATA,\n  content: cmsSigned.toSchema(true)\n});\n\n// Finally create completed TSP response structure\nconst tspResp = new pkijs.TimeStampResp({\n  status: new pkijs.PKIStatusInfo({ status: pkijs.PKIStatus.granted }),\n  timeStampToken: new pkijs.ContentInfo({ schema: cmsContent.toSchema() })\n});\n\nconst tspRespRaw = tspResp.toSchema().toBER();\n',p={},m="Creating a Timestamp response",c={},l=[];function u(e){const n={h1:"h1",header:"header",p:"p",...(0,i.R)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(n.header,{children:(0,a.jsx)(n.h1,{id:"creating-a-timestamp-response",children:"Creating a Timestamp response"})}),"\n",(0,a.jsx)(n.p,{children:"In this example, you will see how to create, parse and verify timestamp responses."}),"\n",(0,a.jsx)(r.A,{language:"ts",children:o})]})}function d(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,a.jsx)(n,{...e,children:(0,a.jsx)(u,{...e})}):u(e)}}}]);