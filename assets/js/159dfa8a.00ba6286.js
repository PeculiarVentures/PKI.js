"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[3936],{84065:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>p,contentTitle:()=>l,default:()=>d,frontMatter:()=>o,metadata:()=>s,toc:()=>u});const s=JSON.parse('{"id":"examples/certificates-and-revocation/working-with-certificate-requests","title":"Working with certificate requests","description":"In this example, you will see how to create a CSR, parse it and verify its signature.","source":"@site/docs/examples/certificates-and-revocation/working-with-certificate-requests.mdx","sourceDirName":"examples/certificates-and-revocation","slug":"/examples/certificates-and-revocation/working-with-certificate-requests","permalink":"/docs/examples/certificates-and-revocation/working-with-certificate-requests","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{},"sidebar":"examples","previous":{"title":"Working with OCSP responses","permalink":"/docs/examples/certificates-and-revocation/working-with-OCSP-responses"},"next":{"title":"Other","permalink":"/docs/examples/other/"}}');var i=n(74848),a=n(28453),r=n(58069);const c='import * as pkijs from \'pkijs\';\nimport * as asn1js from \'asn1js\';\n\n// Get a "crypto" extension\nconst crypto = pkijs.getCrypto(true);\n\nconst pkcs10 = new pkijs.CertificationRequest();\n\npkcs10.subject.typesAndValues.push(new pkijs.AttributeTypeAndValue({\n  type: "2.5.4.3",\n  value: new asn1js.Utf8String({ value: "Test" })\n}));\n\nawait pkcs10.subjectPublicKeyInfo.importKey(keys.publicKey);\n\npkcs10.attributes = [];\n\n// Subject Alternative Name\nconst altNames = new pkijs.GeneralNames({\n  names: [\n    new pkijs.GeneralName({ // email\n      type: 1,\n      value: "email@address.com"\n    }),\n    new pkijs.GeneralName({ // domain\n      type: 2,\n      value: "www.domain.com"\n    }),\n  ]\n});\n\n// SubjectKeyIdentifier\nconst subjectKeyIdentifier = await crypto.digest({ name: "SHA-1" }, pkcs10.subjectPublicKeyInfo.subjectPublicKey.valueBlock.valueHex);\n\npkcs10.attributes.push(new pkijs.Attribute({\n  type: "1.2.840.113549.1.9.14", // pkcs-9-at-extensionRequest\n  values: [(new pkijs.Extensions({\n    extensions: [\n      new pkijs.Extension({\n        extnID: "2.5.29.14", // id-ce-subjectKeyIdentifier\n        critical: false,\n        extnValue: (new asn1js.OctetString({ valueHex: subjectKeyIdentifier })).toBER(false)\n      }),\n      new pkijs.Extension({\n        extnID: "2.5.29.17", // id-ce-subjectAltName\n        critical: false,\n        extnValue: altNames.toSchema().toBER(false)\n      }),\n      new pkijs.Extension({\n        extnID: "1.2.840.113549.1.9.7", // pkcs-9-at-challengePassword\n        critical: false,\n        extnValue: (new asn1js.PrintableString({ value: "passwordChallenge" })).toBER(false)\n      })\n    ]\n  })).toSchema()]\n}));\n\n// Signing final PKCS#10 request\nawait pkcs10.sign(keys.privateKey, "SHA-256");\n\nconst pkcs10Raw = pkcs10.toSchema(true).toBER();\n',o={},l="Working with certificate requests",p={},u=[];function w(e){const t={h1:"h1",header:"header",p:"p",...(0,a.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(t.header,{children:(0,i.jsx)(t.h1,{id:"working-with-certificate-requests",children:"Working with certificate requests"})}),"\n",(0,i.jsx)(t.p,{children:"In this example, you will see how to create a CSR, parse it and verify its signature."}),"\n",(0,i.jsx)(r.A,{language:"ts",children:c})]})}function d(e={}){const{wrapper:t}={...(0,a.R)(),...e.components};return t?(0,i.jsx)(t,{...e,children:(0,i.jsx)(w,{...e})}):w(e)}}}]);