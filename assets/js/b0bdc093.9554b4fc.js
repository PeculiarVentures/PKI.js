"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[5194],{66912:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>p,default:()=>g,frontMatter:()=>o,metadata:()=>m,toc:()=>l});var s=t(85893),a=t(11151),i=t(9286);const r='import * as pkijs from \'pkijs\';\nimport * as asn1js from \'asn1js\';\n\n// Generate random serial number\nconst serialNumber = pkijs.getRandomValues(new Uint8Array(10)).buffer;\n\n// Create specific TST info structure to sign\nconst tstInfo = new pkijs.TSTInfo({\n  version: 1,\n  policy: tspReq.reqPolicy,\n  messageImprint: tspReq.messageImprint,\n  serialNumber: new asn1js.Integer({ valueHex: serialNumber }),\n  genTime: new Date(),\n  ordering: true,\n  accuracy: new pkijs.Accuracy({\n    seconds: 1,\n    millis: 1,\n    micros: 10\n  }),\n  nonce: tspReq.nonce,\n});\n\n// Create and sign CMS Signed Data with TSTInfo\nconst cmsSigned = new pkijs.SignedData({\n  version: 3,\n  encapContentInfo: new pkijs.EncapsulatedContentInfo({\n    eContentType: "1.2.840.113549.1.9.16.1.4", // "tSTInfo" content type\n    eContent: new asn1js.OctetString({ valueHex: tstInfo.toSchema().toBER() }),\n  }),\n  signerInfos: [\n    new pkijs.SignerInfo({\n      version: 1,\n      sid: new pkijs.IssuerAndSerialNumber({\n        issuer: cert.issuer,\n        serialNumber: cert.serialNumber\n      })\n    })\n  ],\n  certificates: [cert]\n});\n\nawait cmsSigned.sign(keys.privateKey, 0, "SHA-256");\n\n// Create CMS Content Info\nconst cmsContent = new pkijs.ContentInfo({\n  contentType: pkijs.ContentInfo.SIGNED_DATA,\n  content: cmsSigned.toSchema(true)\n});\n\n// Finally create completed TSP response structure\nconst tspResp = new pkijs.TimeStampResp({\n  status: new pkijs.PKIStatusInfo({ status: pkijs.PKIStatus.granted }),\n  timeStampToken: new pkijs.ContentInfo({ schema: cmsContent.toSchema() })\n});\n\nconst tspRespRaw = tspResp.toSchema().toBER();\n',o={},p="Creating a Timestamp response",m={id:"examples/timestamping/creating-a-timestamp-response",title:"Creating a Timestamp response",description:"In this example, you will see how to create, parse and verify timestamp responses.",source:"@site/docs/examples/timestamping/creating-a-timestamp-response.mdx",sourceDirName:"examples/timestamping",slug:"/examples/timestamping/creating-a-timestamp-response",permalink:"/docs/examples/timestamping/creating-a-timestamp-response",draft:!1,unlisted:!1,tags:[],version:"current",frontMatter:{},sidebar:"examples",previous:{title:"Creating a Timestamp request",permalink:"/docs/examples/timestamping/creating-a-timestamp-request"}},c={},l=[];function u(e){const n={h1:"h1",p:"p",...(0,a.a)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.h1,{id:"creating-a-timestamp-response",children:"Creating a Timestamp response"}),"\n",(0,s.jsx)(n.p,{children:"In this example, you will see how to create, parse and verify timestamp responses."}),"\n",(0,s.jsx)(i.Z,{language:"ts",children:r})]})}function g(e={}){const{wrapper:n}={...(0,a.a)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(u,{...e})}):u(e)}}}]);