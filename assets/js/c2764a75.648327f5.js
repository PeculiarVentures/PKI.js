"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[7226],{90419:(e,s,n)=>{n.r(s),n.d(s,{assets:()=>l,contentTitle:()=>p,default:()=>h,frontMatter:()=>c,metadata:()=>t,toc:()=>d});const t=JSON.parse('{"id":"examples/certificates-and-revocation/working-with-OCSP-responses","title":"Working with OCSP responses","description":"In this example, you will see how to create and parse OCSP responses.","source":"@site/docs/examples/certificates-and-revocation/working-with-OCSP-responses.mdx","sourceDirName":"examples/certificates-and-revocation","slug":"/examples/certificates-and-revocation/working-with-OCSP-responses","permalink":"/docs/examples/certificates-and-revocation/working-with-OCSP-responses","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{},"sidebar":"examples","previous":{"title":"Working with OCSP requests","permalink":"/docs/examples/certificates-and-revocation/working-with-OCSP-requests"},"next":{"title":"Working with certificate requests","permalink":"/docs/examples/certificates-and-revocation/working-with-certificate-requests"}}');var i=n(74848),r=n(28453),a=n(58069);const o="import * as pkijs from 'pkijs';\nimport * as asn1js from 'asn1js';\n\nconst ocspBasicResp = new pkijs.BasicOCSPResponse();\n\n// Create specific TST info structure to sign\nocspBasicResp.tbsResponseData.responderID = issuerCert.subject;\nocspBasicResp.tbsResponseData.producedAt = new Date();\n\nconst certID = new pkijs.CertID();\nawait certID.createForCertificate(cert, {\n  hashAlgorithm: \"SHA-256\",\n  issuerCertificate: issuerCert,\n});\nconst response = new pkijs.SingleResponse({\n  certID,\n});\nresponse.certStatus = new asn1js.Primitive({\n  idBlock: {\n    tagClass: 3, // CONTEXT-SPECIFIC\n    tagNumber: 0 // [0]\n  },\n  lenBlockLength: 1 // The length contains one byte 0x00\n}); // status - success\nresponse.thisUpdate = new Date();\n\nocspBasicResp.tbsResponseData.responses.push(response);\n\n// Add certificates for chain OCSP response validation\nocspBasicResp.certs = [issuerCert];\n\nawait ocspBasicResp.sign(keys.privateKey, \"SHA-256\");\n\n// Finally create completed OCSP response structure\nconst ocspBasicRespRaw = ocspBasicResp.toSchema().toBER(false);\n\nconst ocspResp = new pkijs.OCSPResponse({\n  responseStatus: new asn1js.Enumerated({ value: 0 }), // success\n  responseBytes: new pkijs.ResponseBytes({\n    responseType: pkijs.id_PKIX_OCSP_Basic,\n    response: new asn1js.OctetString({ valueHex: ocspBasicRespRaw }),\n  }),\n});\n\nconst ocspRespRaw = ocspResp.toSchema().toBER();\n",c={},p="Working with OCSP responses",l={},d=[];function w(e){const s={h1:"h1",header:"header",p:"p",...(0,r.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(s.header,{children:(0,i.jsx)(s.h1,{id:"working-with-ocsp-responses",children:"Working with OCSP responses"})}),"\n",(0,i.jsx)(s.p,{children:"In this example, you will see how to create and parse OCSP responses."}),"\n",(0,i.jsx)(a.A,{language:"ts",children:o})]})}function h(e={}){const{wrapper:s}={...(0,r.R)(),...e.components};return s?(0,i.jsx)(s,{...e,children:(0,i.jsx)(w,{...e})}):w(e)}}}]);